
# DSK - Divisional Secretariat Kalmunai Web Application Setup

This document provides comprehensive instructions for setting up the DSK web application on your cPanel hosting environment.

## 1. Frontend Setup (React App)

### 1.1 Build and Upload Files

1. Build the React application locally:
   ```
   npm run build
   ```

2. Upload the contents of the `dist` folder to:
   `/home/dskalmun/public_html/rapp/`

3. Create a `.htaccess` file in the `/home/dskalmun/public_html/rapp/` directory with the following content:
   ```
   <IfModule mod_rewrite.c>
     RewriteEngine On
     RewriteBase /
     RewriteRule ^index\.html$ - [L]
     RewriteCond %{REQUEST_FILENAME} !-f
     RewriteCond %{REQUEST_FILENAME} !-d
     RewriteRule . /index.html [L]
   </IfModule>
   ```
   This will enable client-side routing to work properly.

### 1.2 Frontend Environment Configuration

1. Create a `.env` file in your React application root (before building):
   ```
   VITE_API_URL=https://yourdomain.com/api
   VITE_ASSETS_URL=https://yourdomain.com/assets
   ```

2. Ensure this is included during the build process.

## 2. Backend Setup (Node.js API)

### 2.1 Setup Node.js Environment

1. Upload the backend files to:
   `/home/dskalmun/nodejs/kalmunai-backend/`

2. SSH into your server or use the cPanel Terminal and navigate to the backend directory:
   ```
   cd /home/dskalmun/nodejs/kalmunai-backend/
   ```

3. Install dependencies:
   ```
   npm install
   ```

4. Create a `.env` file with the following content:
   ```
   PORT=3000
   NODE_ENV=production
   DB_HOST=node238.r-usdatacenter.register.lk
   DB_USER=dskalmun_Admin
   DB_PASSWORD=StrongPassword123!
   DB_NAME=dskalmun_webapp
   JWT_SECRET=dsk_secret_key_2024_kalmunai
   TOKEN_EXPIRY=24h
   CORS_ORIGIN=https://yourdomain.com
   ```

5. Set up PM2 (Process Manager) to keep your Node.js application running:
   ```
   npm install pm2 -g
   pm2 start app.js --name dsk-api
   pm2 startup
   pm2 save
   ```

### 2.2 Backend API Structure

The backend should include the following structure:
```
/home/dskalmun/nodejs/kalmunai-backend/
├── controllers/
│   ├── authController.js
│   ├── adminController.js
│   ├── staffController.js
│   ├── publicController.js
│   ├── departmentController.js
│   └── serviceController.js
├── routes/
│   ├── authRoutes.js
│   ├── adminRoutes.js
│   ├── staffRoutes.js
│   ├── publicRoutes.js
│   └── serviceRoutes.js
├── middleware/
│   ├── auth.js
│   ├── roleCheck.js
│   └── errorHandler.js
├── utils/
│   ├── database.js
│   ├── idCardGenerator.js
│   ├── tokenGenerator.js
│   └── qrCodeGenerator.js
├── templates/
│   ├── idCard.html
│   └── token.html
├── app.js
├── package.json
└── .env
```

## 3. Database Setup

### 3.1 Create Database and User in cPanel

1. Log in to cPanel and go to MySQL Databases.
2. The database `dskalmun_webapp` should already exist based on your information.
3. If not, create it and ensure the user `dskalmun_Admin` has all privileges.
4. If you need to create the user, use a strong password like `StrongPassword123!` (change this for production).

### 3.2 Import Database Schema

1. Log in to phpMyAdmin.
2. Select the `dskalmun_webapp` database.
3. Click on the Import tab.
4. Copy the SQL statements below and save them as `database.sql`, then import this file.

```sql
-- Drop tables if they exist to prevent errors
DROP TABLE IF EXISTS id_cards;
DROP TABLE IF EXISTS tokens;
DROP TABLE IF EXISTS documents;
DROP TABLE IF EXISTS services;
DROP TABLE IF EXISTS divisions;
DROP TABLE IF EXISTS departments;
DROP TABLE IF EXISTS users;

-- Create users table
CREATE TABLE users (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'staff', 'public') NOT NULL DEFAULT 'public',
    nic VARCHAR(20) DEFAULT NULL,
    dob DATE DEFAULT NULL,
    address TEXT DEFAULT NULL,
    mobile VARCHAR(20) DEFAULT NULL,
    department VARCHAR(255) DEFAULT NULL,
    division VARCHAR(255) DEFAULT NULL,
    profile_image VARCHAR(255) DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create departments table
CREATE TABLE departments (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create divisions table
CREATE TABLE divisions (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    department_id CHAR(36) NOT NULL,
    description TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE
);

-- Create services table
CREATE TABLE services (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    department_id CHAR(36) NOT NULL,
    division_id CHAR(36) DEFAULT NULL,
    description TEXT DEFAULT NULL,
    required_documents TEXT DEFAULT NULL,
    process_time VARCHAR(100) DEFAULT NULL,
    status ENUM('active', 'inactive') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE,
    FOREIGN KEY (division_id) REFERENCES divisions(id) ON DELETE SET NULL
);

-- Create documents table
CREATE TABLE documents (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL,
    path VARCHAR(255) NOT NULL,
    department_id CHAR(36) DEFAULT NULL,
    division_id CHAR(36) DEFAULT NULL,
    service_id CHAR(36) DEFAULT NULL,
    user_id CHAR(36) DEFAULT NULL,
    status ENUM('active', 'inactive') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL,
    FOREIGN KEY (division_id) REFERENCES divisions(id) ON DELETE SET NULL,
    FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE SET NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create tokens table
CREATE TABLE tokens (
    id CHAR(36) PRIMARY KEY,
    number INT NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    service_id CHAR(36) NOT NULL,
    user_id CHAR(36) NOT NULL,
    department_id CHAR(36) NOT NULL,
    division_id CHAR(36) DEFAULT NULL,
    status ENUM('pending', 'processing', 'completed', 'cancelled') NOT NULL DEFAULT 'pending',
    notes TEXT DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE,
    FOREIGN KEY (division_id) REFERENCES divisions(id) ON DELETE SET NULL
);

-- Create ID cards table
CREATE TABLE id_cards (
    id CHAR(36) PRIMARY KEY,
    user_id CHAR(36) NOT NULL,
    card_number VARCHAR(50) NOT NULL UNIQUE,
    qr_code VARCHAR(255) NOT NULL,
    issued_date DATE NOT NULL,
    expiry_date DATE DEFAULT NULL,
    status ENUM('active', 'expired', 'revoked') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert initial admin user (password: admin123)
INSERT INTO users (id, name, email, password, role)
VALUES (
    UUID(),
    'Admin User',
    'admin@dsk.gov.lk',
    '$2a$10$bsHJwzJCfP5ch5JlefaZJeN8lQ7Gy.lK9R.frNclZQ5XEyO4tYzmy',
    'admin'
);

-- Insert initial staff user (password: staff123)
INSERT INTO users (id, name, email, password, role, department, division)
VALUES (
    UUID(),
    'Staff Member',
    'staff@dsk.gov.lk',
    '$2a$10$jTHG7kL1oE2580O62846u.YF5ASgi05NndGNdEbB3GTS73RcVP/TC',
    'staff',
    'Administrative Division',
    'General Administration'
);

-- Insert initial public user (password: public123)
INSERT INTO users (id, name, email, password, role, nic, mobile, address)
VALUES (
    UUID(),
    'S.L.Farhana',
    'public@dsk.gov.lk',
    '$2a$10$gGyC6.80GicIDRrzDvaSj.wpENi.2OGYY9RE3CO9axpCeqeQZA6V2',
    'public',
    '985761234V',
    '0771234567',
    'No.123, Main Street, Kalmunai'
);

-- Insert departments
INSERT INTO departments (id, name, description)
VALUES 
(UUID(), 'Administrative Division', 'Issuing of Permits, Certifying and Counter signing of Grama Niladari Certificates'),
(UUID(), 'Social Services Office', 'Provision of Aids and Equipment, Issuing Senior Citizenship Identity Cards'),
(UUID(), 'Planning Division', 'Identifying Development Needs, Evaluating Project Progress'),
(UUID(), 'Accounts Division', 'Preparing Procurement Plans, Handling Payments, Conducting Surveys'),
(UUID(), 'Birth, Death & Marriage', 'Registration and Issuance of Birth, Death, and Marriage Certificates'),
(UUID(), 'NIC', 'Application Processing and Issuance of National Identity Cards');

-- Get department IDs for reference
SET @admin_div_id = (SELECT id FROM departments WHERE name = 'Administrative Division' LIMIT 1);
SET @sso_id = (SELECT id FROM departments WHERE name = 'Social Services Office' LIMIT 1);
SET @planning_id = (SELECT id FROM departments WHERE name = 'Planning Division' LIMIT 1);
SET @accounts_id = (SELECT id FROM departments WHERE name = 'Accounts Division' LIMIT 1);
SET @adr_id = (SELECT id FROM departments WHERE name = 'Birth, Death & Marriage' LIMIT 1);
SET @nic_id = (SELECT id FROM departments WHERE name = 'NIC' LIMIT 1);

-- Insert divisions for Administrative Division
INSERT INTO divisions (id, name, department_id, description)
VALUES
(UUID(), 'General Administration', @admin_div_id, 'Handles general administrative tasks'),
(UUID(), 'Permits & Licenses', @admin_div_id, 'Processes permits and licenses'),
(UUID(), 'Revenue Collection', @admin_div_id, 'Handles revenue collection activities');

-- Insert divisions for Social Services Office
INSERT INTO divisions (id, name, department_id, description)
VALUES
(UUID(), 'Senior Citizen Services', @sso_id, 'Services for senior citizens'),
(UUID(), 'Aid Distribution', @sso_id, 'Handles distribution of aid and equipment');

-- Insert divisions for Planning Division
INSERT INTO divisions (id, name, department_id, description)
VALUES
(UUID(), 'Development Planning', @planning_id, 'Handles development planning'),
(UUID(), 'Project Evaluation', @planning_id, 'Evaluates project progress');

-- Insert divisions for other departments
INSERT INTO divisions (id, name, department_id, description)
VALUES
(UUID(), 'Financial Operations', @accounts_id, 'Handles financial operations'),
(UUID(), 'Birth Registration', @adr_id, 'Handles birth registration'),
(UUID(), 'Death Registration', @adr_id, 'Handles death registration'),
(UUID(), 'Marriage Registration', @adr_id, 'Handles marriage registration'),
(UUID(), 'NIC Processing', @nic_id, 'Processes NIC applications');

-- Get division IDs
SET @permits_div_id = (SELECT id FROM divisions WHERE name = 'Permits & Licenses' LIMIT 1);
SET @senior_div_id = (SELECT id FROM divisions WHERE name = 'Senior Citizen Services' LIMIT 1);
SET @birth_div_id = (SELECT id FROM divisions WHERE name = 'Birth Registration' LIMIT 1);
SET @nic_proc_id = (SELECT id FROM divisions WHERE name = 'NIC Processing' LIMIT 1);

-- Insert services for Administrative Division
INSERT INTO services (id, name, department_id, division_id, description, required_documents, process_time)
VALUES
(UUID(), 'Permit Issuance', @admin_div_id, @permits_div_id, 'Issuance of various permits', 'Application form, ID copy, Proof of address', '3-5 working days'),
(UUID(), 'Certificate Signing', @admin_div_id, @permits_div_id, 'Counter signing of Grama Niladari Certificates', 'Original certificate, ID copy', '1-2 working days');

-- Insert services for Social Services
INSERT INTO services (id, name, department_id, division_id, description, required_documents, process_time)
VALUES
(UUID(), 'Senior Citizen ID', @sso_id, @senior_div_id, 'Issuing Senior Citizenship Identity Cards', 'Application form, Birth certificate, ID copy, Photos', '7-14 working days'),
(UUID(), 'Equipment Provision', @sso_id, @senior_div_id, 'Provision of aids and equipment', 'Medical certificate, Application form, ID copy', '14-21 working days');

-- Insert services for Birth Registration
INSERT INTO services (id, name, department_id, division_id, description, required_documents, process_time)
VALUES
(UUID(), 'Birth Certificate', @adr_id, @birth_div_id, 'Issuance of Birth Certificates', 'Hospital declaration, Parents\' IDs', '5-7 working days');

-- Insert NIC service
INSERT INTO services (id, name, department_id, division_id, description, required_documents, process_time)
VALUES
(UUID(), 'NIC Application', @nic_id, @nic_proc_id, 'Processing National Identity Card applications', 'Application form, Birth certificate, Photos, Guardian consent (if minor)', '14-30 working days');
```

## 4. Domain Configuration

### 4.1 Set up Domain or Subdomain

1. In cPanel, go to Domains or Subdomains section.
2. Point your domain or create a subdomain (e.g., app.yourdomain.com) to the `/home/dskalmun/public_html/rapp/` directory.

### 4.2 SSL Configuration (Recommended)

1. In cPanel, go to SSL/TLS section and select "Manage SSL sites".
2. Install an SSL certificate for your domain (use Let's Encrypt for a free certificate).
3. Make sure both your main domain and any subdomains have SSL certificates.
4. Enable HTTPS redirection for your domain through the .htaccess file.

## 5. API Configuration

### 5.1 Set up Reverse Proxy

Create a file named `.htaccess` in your main domain directory with:

```
<IfModule mod_rewrite.c>
  RewriteEngine On
  
  # Proxy API requests to Node.js server
  RewriteCond %{REQUEST_URI} ^/api/(.*)$ [NC]
  RewriteRule ^api/(.*)$ http://localhost:3000/$1 [P,L]
</IfModule>
```

### 5.2 Create Backend API Entry Point

Create an `app.js` file in `/home/dskalmun/nodejs/kalmunai-backend/` with the following content:

```javascript
const express = require('express');
const cors = require('cors');
const morgan = require('morgan');
const dotenv = require('dotenv');
const path = require('path');

// Load environment variables
dotenv.config();

// Import routes
const authRoutes = require('./routes/authRoutes');
const adminRoutes = require('./routes/adminRoutes');
const staffRoutes = require('./routes/staffRoutes');
const publicRoutes = require('./routes/publicRoutes');
const serviceRoutes = require('./routes/serviceRoutes');

// Create Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({
  origin: process.env.CORS_ORIGIN || '*',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(morgan('dev'));

// Static files
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/staff', staffRoutes);
app.use('/api/public', publicRoutes);
app.use('/api/services', serviceRoutes);

// Root route
app.get('/', (req, res) => {
  res.json({ message: 'Welcome to DSK API' });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(err.statusCode || 500).json({
    success: false,
    message: err.message || 'Something went wrong on the server',
  });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

### 5.3 Create necessary API directories and files

Set up your basic API structure as outlined in the Backend API Structure section above.

## 6. Credentials Summary

### Database Credentials
- Host: node238.r-usdatacenter.register.lk
- Database: dskalmun_webapp
- Username: dskalmun_Admin
- Password: StrongPassword123! (change this for production!)

### Pre-filled User Credentials

1. Admin User
   - Email: admin@dsk.gov.lk
   - Password: admin123
   - Role: admin

2. Staff User
   - Email: staff@dsk.gov.lk
   - Password: staff123
   - Role: staff
   - Department: Administrative Division
   - Division: General Administration

3. Public User
   - Email: public@dsk.gov.lk
   - Password: public123
   - Role: public
   - NIC: 985761234V
   - Mobile: 0771234567
   - Address: No.123, Main Street, Kalmunai

## 7. Maintenance & Backup Procedures

### 7.1 Updating the Application

1. Build an updated version of the React application.
2. Upload the new build files to `/home/dskalmun/public_html/rapp/`.
3. For backend updates, upload new files to `/home/dskalmun/nodejs/kalmunai-backend/` and restart the Node.js application:
   ```
   cd /home/dskalmun/nodejs/kalmunai-backend/
   npm install
   pm2 restart dsk-api
   ```

### 7.2 Regular Backup Procedure

1. Database Backup:
   ```
   mysqldump -u dskalmun_Admin -p dskalmun_webapp > backup_dsk_$(date +%Y%m%d).sql
   ```

2. Files Backup:
   - Use cPanel's backup function to back up your files and databases.
   - Alternatively, use `tar` to create compressed archives:
     ```
     tar -czvf dsk_frontend_backup_$(date +%Y%m%d).tar.gz /home/dskalmun/public_html/rapp/
     tar -czvf dsk_backend_backup_$(date +%Y%m%d).tar.gz /home/dskalmun/nodejs/kalmunai-backend/
     ```

## 8. Security Best Practices

1. Change the default passwords provided in this setup guide.
2. Keep all packages up to date:
   ```
   npm audit fix
   npm update
   ```
3. Implement rate limiting on your API to prevent abuse.
4. Set up a firewall to only allow necessary connections.
5. Use HTTPS for all communications.
6. Implement proper input validation for all API endpoints.
7. Set up secure headers using helmet.js.

## 9. Troubleshooting

### 9.1 Common Issues and Solutions

#### Frontend Routing Issues
If your React routes don't work when refreshing the page, verify your `.htaccess` file is correctly set up.

#### Database Connection Issues
- Check your database credentials in the `.env` file
- Ensure the MySQL server is running
- Try connecting manually: `mysql -u dskalmun_Admin -p -h node238.r-usdatacenter.register.lk dskalmun_webapp`

#### API Connection Issues
- Verify the proxy pass is correctly set up
- Check that the Node.js server is running (use `pm2 status`)
- Look for errors in PM2 logs: `pm2 logs dsk-api`

### 9.2 Check Server Logs
- Apache Logs: `/home/dskalmun/logs/`
- Node.js Logs: Run `pm2 logs dsk-api`

For any technical assistance, please contact your system administrator.
