
# DSK - Divisional Secretariat Kalmunai Web Application Setup

This document provides instructions for setting up the DSK web application on your cPanel hosting environment.

## 1. Frontend Setup (React App)

### 1.1 Upload Files

1. Build the React application locally:
   ```
   npm run build
   ```

2. Upload the contents of the `dist` folder to:
   `/home/dskalmun/public_html/rapp/`

3. Create a `.htaccess` file in the `/home/dskalmun/public_html/rapp/` directory with the following content:
   ```
   <IfModule mod_rewrite.c>
     RewriteEngine On
     RewriteBase /
     RewriteRule ^index\.html$ - [L]
     RewriteCond %{REQUEST_FILENAME} !-f
     RewriteCond %{REQUEST_FILENAME} !-d
     RewriteRule . /index.html [L]
   </IfModule>
   ```
   This will enable client-side routing to work properly.

## 2. Backend Setup (Node.js API)

### 2.1 Setup Node.js Environment

1. Upload the backend files to:
   `/home/dskalmun/nodejs/kalmunai-backend/`

2. SSH into your server or use the cPanel Terminal and navigate to the backend directory:
   ```
   cd /home/dskalmun/nodejs/kalmunai-backend/
   ```

3. Install dependencies:
   ```
   npm install
   ```

4. Create a `.env` file with the following content:
   ```
   PORT=3000
   NODE_ENV=production
   DB_HOST=localhost
   DB_USER=dskalmun_Admin
   DB_PASSWORD=your_db_password
   DB_NAME=dskalmun_webapp
   JWT_SECRET=your_jwt_secret_key
   ```

5. Set up PM2 (Process Manager) to keep your Node.js application running:
   ```
   npm install pm2 -g
   pm2 start app.js --name dsk-api
   pm2 startup
   pm2 save
   ```

## 3. Database Setup

### 3.1 Create Database and User

1. Log in to cPanel and go to MySQL Databases.
2. Create a database named `dskalmun_webapp`.
3. Create a user named `dskalmun_Admin` with a secure password.
4. Add the user to the database with all privileges.

### 3.2 Import Database Schema

1. Log in to phpMyAdmin.
2. Select the `dskalmun_webapp` database.
3. Click on the Import tab.
4. Choose the `database.sql` file provided with this setup guide.
5. Click Go to import the database schema.

## 4. Domain Configuration

### 4.1 Set up Domain or Subdomain

1. In cPanel, go to Domains or Subdomains section.
2. Point your domain or create a subdomain (e.g., app.yourdomain.com) to the `/home/dskalmun/public_html/rapp/` directory.

### 4.2 SSL Configuration (Recommended)

1. In cPanel, go to SSL/TLS section.
2. Install an SSL certificate for your domain.
3. Enable HTTPS redirection for your domain.

## 5. API Configuration

### 5.1 Update API Endpoint in Frontend

1. Edit the `.env` file in the frontend build:
   ```
   VITE_API_URL=https://your-domain.com/api
   ```

2. Set up a proxy pass in your Apache configuration to forward API requests to your Node.js server.
   Create a file named `.htaccess` in your main domain directory with:
   ```
   <IfModule mod_rewrite.c>
     RewriteEngine On
     
     # Proxy API requests to Node.js server
     RewriteCond %{REQUEST_URI} ^/api/(.*)$ [NC]
     RewriteRule ^api/(.*)$ http://localhost:3000/$1 [P,L]
   </IfModule>
   ```

## 6. Database Schema (database.sql)

```sql
-- Create users table
CREATE TABLE users (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'staff', 'public') NOT NULL DEFAULT 'public',
    nic VARCHAR(20),
    dob DATE,
    address TEXT,
    mobile VARCHAR(20),
    department VARCHAR(255),
    division VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create departments table
CREATE TABLE departments (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create divisions table
CREATE TABLE divisions (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    department_id CHAR(36) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE
);

-- Create services table
CREATE TABLE services (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    department_id CHAR(36) NOT NULL,
    division_id CHAR(36),
    description TEXT,
    required_documents TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE CASCADE,
    FOREIGN KEY (division_id) REFERENCES divisions(id) ON DELETE SET NULL
);

-- Create documents table
CREATE TABLE documents (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL,
    path VARCHAR(255) NOT NULL,
    department_id CHAR(36),
    service_id CHAR(36),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL,
    FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE SET NULL
);

-- Create tokens table
CREATE TABLE tokens (
    id CHAR(36) PRIMARY KEY,
    number INT NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL,
    user_id CHAR(36) NOT NULL,
    service_id CHAR(36) NOT NULL,
    status ENUM('pending', 'completed', 'cancelled') NOT NULL DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE
);

-- Create ID cards table
CREATE TABLE id_cards (
    id CHAR(36) PRIMARY KEY,
    user_id CHAR(36) NOT NULL,
    qr_code VARCHAR(255) NOT NULL,
    issued_date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert initial admin user
INSERT INTO users (id, name, email, password, role)
VALUES (
    UUID(),
    'Admin User',
    'admin@dsk.gov.lk',
    '$2a$10$bsHJwzJCfP5ch5JlefaZJeN8lQ7Gy.lK9R.frNclZQ5XEyO4tYzmy', -- hashed 'admin123'
    'admin'
);

-- Insert departments
INSERT INTO departments (id, name, description)
VALUES 
(UUID(), 'Administrative Division', 'Issuing of Permits, Certifying and Counter signing of Grama Niladari Certificates'),
(UUID(), 'Social Services Office', 'Provision of Aids and Equipment, Issuing Senior Citizenship Identity Cards'),
(UUID(), 'Planning Division', 'Identifying Development Needs, Evaluating Project Progress'),
(UUID(), 'Accounts Division', 'Preparing Procurement Plans, Handling Payments, Conducting Surveys'),
(UUID(), 'Birth, Death & Marriage', 'Registration and Issuance of Birth, Death, and Marriage Certificates'),
(UUID(), 'NIC', 'Application Processing and Issuance of National Identity Cards');
```

## 7. Troubleshooting

### 7.1 Check Server Logs
- Apache Logs: `/home/dskalmun/logs/`
- Node.js Logs: Run `pm2 logs dsk-api`

### 7.2 Common Issues and Solutions

#### Frontend Routing Issues
If your React routes don't work when refreshing the page, verify your `.htaccess` file is correctly set up.

#### Database Connection Issues
Check your database credentials in the `.env` file and confirm the MySQL server is running.

#### API Connection Issues
Verify the proxy pass is correctly set up and that the Node.js server is running (check with `pm2 status`).

## 8. Maintenance

### 8.1 Updating the Application

1. Build an updated version of the React application.
2. Upload the new build files to `/home/dskalmun/public_html/rapp/`.
3. For backend updates, upload new files to `/home/dskalmun/nodejs/kalmunai-backend/` and restart the Node.js application:
   ```
   cd /home/dskalmun/nodejs/kalmunai-backend/
   npm install
   pm2 restart dsk-api
   ```

### 8.2 Backup Procedure

1. Database Backup:
   ```
   mysqldump -u dskalmun_Admin -p dskalmun_webapp > backup_dsk_$(date +%Y%m%d).sql
   ```

2. Files Backup:
   - Use cPanel's backup function to back up your files and databases.
   - Alternatively, use `tar` to create compressed archives:
     ```
     tar -czvf dsk_frontend_backup_$(date +%Y%m%d).tar.gz /home/dskalmun/public_html/rapp/
     tar -czvf dsk_backend_backup_$(date +%Y%m%d).tar.gz /home/dskalmun/nodejs/kalmunai-backend/
     ```

## 9. Security Recommendations

1. Keep all packages up to date:
   ```
   npm audit
   npm update
   ```

2. Use strong passwords for all accounts.

3. Implement rate limiting on your API to prevent abuse.

4. Regularly back up your database and files.

5. Configure the firewall to only allow necessary connections.

6. Use HTTPS for all communications.

For any technical assistance, please contact your system administrator.
